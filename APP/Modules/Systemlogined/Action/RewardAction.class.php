<?php  	/**	* 会员管理控制器	*/	class RewardAction extends CommonAction{		    //加权平均等级列表页面		    public function weighted_average_set_list(){		    			        $list = M('weighted_average_set')->select();		        foreach ($list as &$value) {		        	foreach ($list as &$value2) {		        		if($value2['level_condition']==$value['id']){		        			$value2['level_condition_name'] = $value['name'];		        		}		        	}		        }		        // echo "<pre>";		        // var_dump($list);die;		        $this->assign('list',$list);		        $this->display('weighted_average_set_list');		    }		    //添加加权平均等级的页面		    public function add_weighted_average_set(){		        $this->display('add_weighted_average_set');		    }		    //添加团队表单处理		    public function addWeightedAverageSetHandle(){		        if (M('weighted_average_set')->add($_POST)) {		            //添加日志操作		            $desc = '添加一个新的加权平均等级';		            write_log(session('username'),'admin',$desc);		            $this->success('添加成功',U(GROUP_NAME.'/Member/weighted_average_set_list'));		        }else{		            $this->error('添加失败');		        }		    }		    //修改加权平均等级的页面		    public function	edit_weighted_average_set(){		        // dump($_SESSION);		        $weighted_average_set = M('weighted_average_set')->where(array('id'=>I('id')))->find();		        $list = M('weighted_average_set')->select();		        $this->assign('weighted_average_set',$weighted_average_set);		        $this->assign('list',$list);		        $this->assign('gifts',$gifts);		        $this->display('edit_weighted_average_set');		    }		    //修改加权平均等级的处理		    public function editWeightedAverageSetHandle(){		        $id = I('id',0,'intval');		        unset($_POST['id']);		        M('weighted_average_set')->where(array('id'=>$id))->save($_POST);		        //添加日志		        $desc = '修改ID为'. id .'的加权平均等级';		        write_log(session('username'),'admin',$desc);		        $this->success('加权平均等级修改成功!',U(GROUP_NAME.'/Reward/weighted_average_set_list'));		    }		    public function del_weighted_average_set(){				$id = I('id');				$weighted_average_set = M("weighted_average_set");				$map['id'] = array('in',$id);				if($weighted_average_set -> where($map) -> delete($id)){						//添加日志操作						$desc = '删除一个加权平均等级';					    write_log(session('username'),'admin',$desc);						$this->success('删除加权平均等级成功',U(GROUP_NAME .'/Reward/weighted_average_set_list'));				}else{					$this -> error("删除失败");				}			}		/**		  * 加权平均列表		  * @param  $total_coins               今日矿池代币总量		  * @param  $weighted_average_set      加权平均设置的数据		  * @param  $v4_condition              加权v4的条件		  * @return $all_member				   全部会员的信息		  * @return $num				   	   加权平均等级对应的人数		  * @return $rate				       加权平均等级对应的奖励比例		  * @return $reward				       加权平均等级对应的奖励总和		  * @return $weighted_average		   加权平均对应等级下每个人能分到的值		  * @return $large				       大区的业绩		  * @return $total				       总业绩		  * @return $little_sum				   小区的总和业绩		  * @return $all_member_reward		   全部会员的信息分页		  */		public function weighted_average_list(){			$Data = M('jinbidetail'); // 实例化Data数据对象			import("@.ORG.Util.Page");// 导入分页类			// echo "<pre>";			$total_coins = C('total_coins');			$weighted_average_set = M('weighted_average_set')->select();			$all_member = M('member')->field('id,level,username,weighted_level,mobile,achievement')->group('weighted_level desc,id asc')->select();			$weighted_array = array();			foreach ($weighted_average_set as  $val) {				$num =  M('member')->field('id,weighted_level')->where(array('weighted_level'=>array("egt",$val['weighted_level'])))->count();				$rate = $val['rate']; 				$reward = $total_coins*$rate/100;				$weighted_average = round($reward/$num,2) ;					foreach($all_member as &$val2){					$count = M('member')->where(array('parent_id'=>$val2['id'],'weighted_level'=>$val['level_condition']))->count();					$count = M('member')->where(array('parent_id'=>$val2['id']))->where(array('weighted_level'=>$val['level_condition']))->count();					$large = $this->max($val2['id']);					if(empty($large)) $large =0;					$total = M('member')->where(array("parent_id"=>$val2['id']))->sum('achievement'); 					if(empty($total)) $total = 0;  					$little_sum = $total-$large;					if($count>=$val['level_num']&&$large>=$val['large_achievement']&&$little_sum>=$val['little_achievement']&&$total>=$val['total_achievement']){	// echo $val2['id'].':'.$count.'个'.$val['level_condition'].'<br/>';											$now_level = M('member')->where(array('id'=>$val2['id']))->getField('weighted_level');							if($now_level<$val['weighted_level']){							M('member')->where(array('id'=>$val2['id']))->save(array('weighted_level'=>$val['weighted_level']));						}					}					if($val2['weighted_level']==$val['weighted_level']){						$val2['total_weighted_average'] += $weighted_average;					}				}			}			$select_member = array();			foreach ($all_member as &$value) {				$value['level_name'] = '无';				foreach ($weighted_average_set as &$value2) {					if($value['weighted_level']==$value2['weighted_level']){						$value['level_name'] = $value2['name'];						$value['total_weighted_average'] = round($value['total_weighted_average'],2);					}				}				//查询				if(!empty($_POST['typename'])){					$type = $_POST['type'];					$typename = $_POST['typename'];					if($type ==1){						if($value["id"]==$typename){							$select_member[] = $value;						}					}elseif($type ==2){						if($value["level_name"]==$typename){							$select_member[] = $value;						}					}elseif($type ==3){						if($value["username"]==$typename){							$select_member[] = $value;						}					}elseif($type ==4){						if($value["mobile"]==$typename){							$select_member[] = $value;						}					}				}			}			$all_count = count($all_member);// 查询满足要求的总记录数			$select_count = count($select_member);// 查询满足要求的总记录数	        $all_Page  = new Page($all_count,10);// 实例化分页类 传入总记录数	        $select_Page  = new Page($select_count,10);// 实例化分页类 传入总记录数	        	        if(empty($Page -> listRows)) $Page -> listRows=10;		    $all_member_reward = array_slice($all_member, $all_Page ->firstRow,$Page -> listRows,true);		    $select_member_reward = array_slice($select_member, $select_Page ->firstRow,$Page -> listRows,true);		    $day = date('Y-m-d',time());		    $reward_ret = M('reward_status')->where(array('date'=>$day))->find();		    if(!$reward_ret){				$reward_status = '一键分配';		    }else{		    	if($reward_ret['weighted_status']==0){		    		$reward_status = '一键分配';		    	}else{		    		$reward_status = '已分配';		    	}		    }			$this->assign('reward_status',$reward_status);				$this->assign('total_coins',$total_coins);									if(!empty($_POST['typename'])){				$show = $select_Page->show();// 分页显示输出				$this->assign('page',$show);// 赋值分页输出				$this->assign('type',$_POST['type']);				$this->assign('typename',$_POST['typename']);				$this->assign('list',$select_member_reward);			}else{				$show = $all_Page->show();// 分页显示输出				$this->assign('page',$show);// 赋值分页输出				$this->assign('list',$all_member_reward);			}			$this->display();		}		/**		  * 找出自己下面所有成员里业绩最好的成员的业绩		  * @param  $id               id		  * @return string		  */		 public function max($id){		     $list = M('member')->field('id,parent_id,achievement')->select();		     $push_member = M('member')->where(array("parent_id"=>$id))->select();		     foreach($push_member as $v){		         $push_member2['id'][]= $v['id'];		         $push_member2['achievement'][]= $v['achievement'];		     }		     $maxkey = array_search(max($push_member2['achievement']),$push_member2['achievement']);		     return $push_member2['achievement'][$maxkey];		 }		/**		  * 一键分配		  * @param  $total_coins               今日矿池代币总量		  * @param  $weighted_average_set      加权平均设置的数据		  * @param  $v4_condition              加权v4的条件		  * @return $all_member				   全部会员的信息		  * @return $num				   	   加权平均等级对应的人数		  * @return $rate				       加权平均等级对应的奖励比例		  * @return $reward				       加权平均等级对应的奖励总和		  * @return $weighted_average		   加权平均对应等级下每个人能分到的值		  * @return string		  */		 public function change_reward_status(){ 			$total_coins = C('total_coins'); 			$weighted_average_set = M('weighted_average_set')->select(); 			$all_member = M('member')->field('id,level,username,weighted_level,mobile,achievement')->order('weighted_level desc')->select(); 			$weighted_array = array(); 			foreach ($weighted_average_set as  $val) { 				$num =  M('member')->field('id,weighted_level')->where(array('weighted_level'=>array("egt",$val['weighted_level'])))->count(); 				$rate = $val['rate'];  				$reward = $total_coins*$rate/100; 				$weighted_average = round($reward/$num,2) ;	 				foreach($all_member as &$val2){ 					if($val2['weighted_level']==$val['weighted_level']){ 						$val2['total_weighted_average'] += $weighted_average; 					} 				} 			}		    $day = date('Y-m-d',time());		    $reward_status = M('reward_status')->where(array('date'=>$day))->find();		    		    $data = array(		    	'reward' => $total_coins,		    	'date' => $day,		    	'weighted_status' =>1,		    );		    if(!$reward_status){		    	M('reward_status')->add($data);		    	foreach ($all_member as $value) {		    		if($value['total_weighted_average']>0){		    			M('member')->where(array('id'=>$value['id']))->setInc('ipfs',$value['total_weighted_average']);		    			jinbi($value['username'],$value['total_weighted_average'],'加权平均分红算力奖',1,5,'ipfs');		    		}		    	}		    	echo json_encode(array('msg' => '分配成功','status'=>'已分配'));die;		    }else{		    	if($reward_status['status']==0){		    		foreach ($all_member as $value) {		    			if($value['total_weighted_average']>0){		    				M('member')->where(array('id'=>$value['id']))->setInc('ipfs',$value['total_weighted_average']);		    				jinbi($value['username'],$value['total_weighted_average'],'加权平均分红算力奖',1,5,'ipfs');		    			}		    		}			    	M('reward_status')->where(array('date'=>$day))->save(array('weighted_status' =>1));			    	echo json_encode(array('msg' => '分配成功','status'=>'已分配'));die;		    	}else{		    		echo json_encode(array('msg'=>'你已分配过','status'=>'已分配'));die;		    	}		    }		    		 }		 //导出全部/excel         public function excel() { 			$Data = M('jinbidetail'); // 实例化Data数据对象			import("@.ORG.Util.Page");// 导入分页类						$count = M('member')->count();// 查询满足要求的总记录数	        $Page  = new Page($count,10);// 实例化分页类 传入总记录数			// echo "<pre>";			$total_coins = C('total_coins');			$weighted_average_set = M('weighted_average_set')->select();			$all_member = M('member')->field('id,level,username,weighted_level,mobile,achievement')->group('weighted_level desc,id asc')->select();			$weighted_array = array();			foreach ($weighted_average_set as  $val) {				$num =  M('member')->field('id,weighted_level')->where(array('weighted_level'=>array("egt",$val['weighted_level'])))->count();				$rate = $val['rate']; 				$reward = $total_coins*$rate/100;				$weighted_average = round($reward/$num,2) ;					foreach($all_member as &$val2){					$count = M('member')->where(array('parent_id'=>$val2['id'],'weighted_level'=>$val['level_condition']))->count();					$count = M('member')->where(array('parent_id'=>$val2['id']))->where(array('weighted_level'=>$val['level_condition']))->count();					$large = $this->max($val2['id']);					if(empty($large)) $large =0;					$total = M('member')->where(array("parent_id"=>$val2['id']))->sum('achievement'); 					if(empty($total)) $total = 0;  					$little_sum = $total-$large;					if($count>=$val['level_num']&&$large>=$val['large_achievement']&&$little_sum>=$val['little_achievement']&&$total>=$val['total_achievement']){	// echo $val2['id'].':'.$count.'个'.$val['level_condition'].'<br/>';											$now_level = M('member')->where(array('id'=>$val2['id']))->getField('weighted_level');							if($now_level<$val['weighted_level']){							M('member')->where(array('id'=>$val2['id']))->save(array('weighted_level'=>$val['weighted_level']));						}					}					if($val2['weighted_level']==$val['weighted_level']){						$val2['total_weighted_average'] += $weighted_average;					}				}			}			$select_member = array();			foreach ($all_member as &$value) {				$value['level_name'] = '无';				foreach ($weighted_average_set as &$value2) {					if($value['weighted_level']==$value2['weighted_level']){						$value['level_name'] = $value2['name'];					}				}				//查询				if(!empty($_POST['typename'])){					$type = $_POST['type'];					$typename = $_POST['typename'];					if($type ==1){						if($value["id"]==$typename){							$select_member[] = $value;						}					}elseif($type ==2){						if($value["level_name"]==$typename){							$select_member[] = $value;						}					}elseif($type ==3){						if($value["username"]==$typename){							$select_member[] = $value;						}					}elseif($type ==4){						if($value["mobile"]==$typename){							$select_member[] = $value;						}					}				}			} 			if($_GET['type']==1){ 				if(!empty($_POST['typename'])){ 					$list = $select_member; 				}else{ 					$list = $all_member; 				} 			}else{ 				$list = $all_member; 			}             require_once ROOT_PATH . '/extend/lib/PHPExcel/Classes/PHPExcel.php';             $objPHPExcel = new \PHPExcel();             //列宽 自适应             $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(10);             $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(10);             $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);             $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setAutoSize(true);             $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10);             $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(15);             $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setAutoSize(true);             //根据excel坐标，添加数据             $objPHPExcel->setActiveSheetIndex(0)                 ->setCellValue('A1', '编号')                 ->setCellValue('B1', '级别')                 ->setCellValue('C1', '姓名')                 ->setCellValue('D1', '手机号码')                 ->setCellValue('E1', '分红(fil)');             foreach($list as $key=>$val){                 $num = $key +2;                 $A = 'A'.$num;                 $B = 'B'.$num;                 $C = 'C'.$num;                 $D = 'D'.$num;                 $E = 'E'.$num;                 if(empty($val['total_weighted_average'])) $val['total_weighted_average']=0;                 $objPHPExcel->setActiveSheetIndex(0)                     ->setCellValue($A,$val['id'])                     ->setCellValue($B,$val['level_name'])                     ->setCellValue($C,$val['username'])                     ->setCellValue($D,$val['mobile'])                     ->setCellValue($E,$val['total_weighted_average']);             }             $showtime = date('Ymdhis');             $file_name = '加权平均分红列表'.$showtime.'.xlsx';             /*生成文件并下载*/             header('Content-Type: application/vnd.ms-excel');             // header('Content-Disposition: attachment;filename="'.'data.xlsx"');             header('Content-Disposition: attachment;filename="'.$file_name.'"');             header('Cache-Control: max-age=0');             $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');             $objWriter->save('php://output');             #释放内存             unset($objWriter);             unset($objPHPExcel);             $desc = '导出全部订单'; 			write_log(session('adminusername'),'admin',$desc);         }			}		?>